/*
 * Tinkers Construct
 * Master build file
 * 
 * Authors: boni, Sunstrike, ProgWML6
 * Help from AbrarSyed
 */

import com.gtnewhorizons.retrofuturagradle.mcp.ReobfuscatedJar

import static org.gradle.internal.logging.text.StyledTextOutput.Style

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.19'
}

repositories {
        
maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'forge'
        url 'https://files.minecraftforge.net/maven'
    }
    maven { // Mantle and JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
    maven { // Quark and ARL
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
}


apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group= "slimeknights"
archivesBaseName = "TConstruct"

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
configurations {
    deployerJars
}

// sets version to the slimeKnights version format
task buildInfo {
    try {
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        proc.waitFor()
        if (proc.exitValue() == 0) {
            ext.revision = proc.text.trim()
        } else {
            ext.revision = "GITBORK"
        }
    } catch(all) {
        ext.revision = "gitgud"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${config.minecraft_version}-${artifact_version}"

minecraft {
mcVersion = "1.12.2"
    username = "Dev"

    setMcpMappingChannel("snapshot")
    setMcpMappingVersion("20170803")



}


tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from("resources/META-INF/tconstruct_at.cfg")
tasks.srgifyBinpatchedJar.accessTransformerFiles.from("resources/META-INF/tconstruct_at.cfg")

//tasks.deobfuscateMergedJarToSrg.configure {accessTransformerFiles.from("/home/stone/git/tinkers/resources/META-INF/tconstruct_at.cfg")}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    implementation rfg.deobf("slimeknights.mantle:Mantle:${config.minecraft_version_short}-${config.mantle_version}")

    // compile against the JEI API
    compileOnly "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}:api"
    // at runtime, use the full JEI jar
    runtimeOnly("mezz.jei:jei_${config.minecraft_version}:${config.jei_version}")

    compileOnly "curse.maven:hwyla-253449:2568751"
    compileOnly "mcjty.theoneprobe:TheOneProbe-1.12:${config.probe_version}"
    compileOnly "cofh:RedstoneFlux:${config.redstoneflux_version}:universal"
    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'

    //deobfCompile "vazkii.autoreglib:AutoRegLib:${config.arl_version}"
    compileOnly "vazkii.quark:Quark:${config.quark_version}:api"
}

sourceSets {
    main {
        resources {
            srcDir 'resources'
        }
    }
}

// Add Access Transformers Manifest
jar {
    manifest {
        attributes 'FMLAT': 'tconstruct_at.cfg'
    }
    
    finalizedBy reobfJar
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
	manifest {
        attributes 'FMLAT': 'tconstruct_at.cfg'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

